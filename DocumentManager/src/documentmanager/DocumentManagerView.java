/*
 * DocumentManagerView.java
 */

package documentmanager;

import org.jdesktop.application.Action;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;

import java.io.File;
import java.util.HashMap;

/**
 * The application's main frame.
 */
public class DocumentManagerView extends FrameView {
    private File fileSelected;
    private File directorySelected;

    private static final int PROCESS_STEP_COLPOS = 0;
    private static final int PROCESS_DESCRIPTION_COLPOS = 1;
    private static final int PROCESS_STATUSFLAG_COLPOS = 2;

    public DocumentManagerView(SingleFrameApplication app) {
        super(app);

        initComponents();
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = DocumentManagerApp.getApplication().getMainFrame();
            aboutBox = new DocumentManagerAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        DocumentManagerApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        tabPane = new javax.swing.JTabbedPane();
        filePanel = new javax.swing.JPanel();
        fileLabel = new javax.swing.JLabel();
        fileNameTextField = new javax.swing.JTextField();
        fileChooserButton = new javax.swing.JButton();
        filePathLabel = new javax.swing.JLabel();
        editPropertyButton = new javax.swing.JButton();
        tagPropertyLabel = new javax.swing.JLabel();
        tagPropertyTextField = new javax.swing.JTextField();
        commentPropertyLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        commentPropertyTextArea = new javax.swing.JTextArea();
        authorPropertyLabel = new javax.swing.JLabel();
        authorPropertyTextField = new javax.swing.JTextField();
        lastAuthorPropertyLabel = new javax.swing.JLabel();
        lastAuthorPropertyTextField = new javax.swing.JTextField();
        notificationLabel = new javax.swing.JLabel();
        tabFileDescriptionLabel = new javax.swing.JLabel();
        processPanel = new javax.swing.JPanel();
        fileProcLabel = new javax.swing.JLabel();
        fileNameProcTextField = new javax.swing.JTextField();
        filePathProcLabel = new javax.swing.JLabel();
        fileChooserProcButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        processStepTable = new javax.swing.JTable();
        notificationProcLabel = new javax.swing.JLabel();
        addProcStepLabel = new javax.swing.JLabel();
        processStepTextField = new javax.swing.JTextField();
        addProcStepDescLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        processStepDescTextArea = new javax.swing.JTextArea();
        addProcessStepButton = new javax.swing.JButton();
        editProcessButton = new javax.swing.JButton();
        tabProcessDescriptionLabel = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu controlMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        mainPanel.setName("mainPanel"); // NOI18N

        tabPane.setName("tabPane"); // NOI18N

        filePanel.setName("filePanel"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(documentmanager.DocumentManagerApp.class).getContext().getResourceMap(DocumentManagerView.class);
        fileLabel.setText(resourceMap.getString("fileLabel.text")); // NOI18N
        fileLabel.setName("fileLabel"); // NOI18N

        fileNameTextField.setText(resourceMap.getString("fileNameTextField.text")); // NOI18N
        fileNameTextField.setName("fileNameTextField"); // NOI18N

        fileChooserButton.setText(resourceMap.getString("fileChooserButton.text")); // NOI18N
        fileChooserButton.setName("fileChooserButton"); // NOI18N
        fileChooserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileChooserButtonActionPerformed(evt);
            }
        });

        filePathLabel.setText(resourceMap.getString("filePathLabel.text")); // NOI18N
        filePathLabel.setName("filePathLabel"); // NOI18N

        editPropertyButton.setText(resourceMap.getString("editPropertyButton.text")); // NOI18N
        editPropertyButton.setName("editPropertyButton"); // NOI18N
        editPropertyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editPropertyButtonActionPerformed(evt);
            }
        });

        tagPropertyLabel.setText(resourceMap.getString("tagPropertyLabel.text")); // NOI18N
        tagPropertyLabel.setName("tagPropertyLabel"); // NOI18N

        tagPropertyTextField.setText(resourceMap.getString("tagPropertyTextField.text")); // NOI18N
        tagPropertyTextField.setName("tagPropertyTextField"); // NOI18N
        tagPropertyTextField.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                tagPropertyTextFieldInputMethodTextChanged(evt);
            }
        });

        commentPropertyLabel.setText(resourceMap.getString("commentPropertyLabel.text")); // NOI18N
        commentPropertyLabel.setName("commentPropertyLabel"); // NOI18N

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        commentPropertyTextArea.setColumns(20);
        commentPropertyTextArea.setRows(5);
        commentPropertyTextArea.setName("commentPropertyTextArea"); // NOI18N
        commentPropertyTextArea.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                commentPropertyTextAreaInputMethodTextChanged(evt);
            }
        });
        jScrollPane2.setViewportView(commentPropertyTextArea);

        authorPropertyLabel.setText(resourceMap.getString("authorPropertyLabel.text")); // NOI18N
        authorPropertyLabel.setName("authorPropertyLabel"); // NOI18N

        authorPropertyTextField.setText(resourceMap.getString("authorPropertyTextField.text")); // NOI18N
        authorPropertyTextField.setName("authorPropertyTextField"); // NOI18N

        lastAuthorPropertyLabel.setText(resourceMap.getString("lastAuthorPropertyLabel.text")); // NOI18N
        lastAuthorPropertyLabel.setName("lastAuthorPropertyLabel"); // NOI18N

        lastAuthorPropertyTextField.setText(resourceMap.getString("lastAuthorPropertyTextField.text")); // NOI18N
        lastAuthorPropertyTextField.setName("lastAuthorPropertyTextField"); // NOI18N
        lastAuthorPropertyTextField.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                lastAuthorPropertyTextFieldInputMethodTextChanged(evt);
            }
        });

        notificationLabel.setFont(resourceMap.getFont("notificationLabel.font")); // NOI18N
        notificationLabel.setText(resourceMap.getString("notificationLabel.text")); // NOI18N
        notificationLabel.setName("notificationLabel"); // NOI18N

        tabFileDescriptionLabel.setText(resourceMap.getString("tabFileDescriptionLabel.text")); // NOI18N
        tabFileDescriptionLabel.setName("tabFileDescriptionLabel"); // NOI18N

        javax.swing.GroupLayout filePanelLayout = new javax.swing.GroupLayout(filePanel);
        filePanel.setLayout(filePanelLayout);
        filePanelLayout.setHorizontalGroup(
            filePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(filePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(filePanelLayout.createSequentialGroup()
                        .addGroup(filePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, filePanelLayout.createSequentialGroup()
                                .addComponent(notificationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                                .addComponent(editPropertyButton)
                                .addGap(99, 99, 99))
                            .addComponent(commentPropertyLabel)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, filePanelLayout.createSequentialGroup()
                                .addGroup(filePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, filePanelLayout.createSequentialGroup()
                                        .addComponent(tagPropertyLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(tagPropertyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, filePanelLayout.createSequentialGroup()
                                        .addComponent(lastAuthorPropertyLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(lastAuthorPropertyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, filePanelLayout.createSequentialGroup()
                                        .addComponent(fileLabel)
                                        .addGap(18, 18, 18)
                                        .addGroup(filePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(filePathLabel)
                                            .addComponent(fileNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 138, Short.MAX_VALUE)
                                .addComponent(fileChooserButton)
                                .addGap(80, 80, 80)))
                        .addContainerGap())
                    .addGroup(filePanelLayout.createSequentialGroup()
                        .addComponent(authorPropertyLabel)
                        .addGap(14, 14, 14)
                        .addComponent(authorPropertyTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                        .addGap(409, 409, 409))
                    .addGroup(filePanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(311, Short.MAX_VALUE))
                    .addGroup(filePanelLayout.createSequentialGroup()
                        .addComponent(tabFileDescriptionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 549, Short.MAX_VALUE)
                        .addGap(80, 80, 80))))
        );
        filePanelLayout.setVerticalGroup(
            filePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabFileDescriptionLabel)
                .addGap(18, 18, 18)
                .addGroup(filePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileLabel)
                    .addComponent(fileChooserButton)
                    .addComponent(fileNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filePathLabel)
                .addGap(18, 18, 18)
                .addGroup(filePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(authorPropertyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(authorPropertyLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(filePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lastAuthorPropertyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lastAuthorPropertyLabel))
                .addGap(18, 18, 18)
                .addGroup(filePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tagPropertyLabel)
                    .addComponent(tagPropertyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addComponent(commentPropertyLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(filePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(filePanelLayout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(editPropertyButton))
                    .addGroup(filePanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(notificationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(35, 35, 35))
        );

        fileNameTextField.setEditable(false);
        authorPropertyTextField.setEditable(false);

        tabPane.addTab("File", filePanel);

        processPanel.setName("processPanel"); // NOI18N

        fileProcLabel.setText(resourceMap.getString("fileProcLabel.text")); // NOI18N
        fileProcLabel.setName("fileProcLabel"); // NOI18N

        fileNameProcTextField.setName("fileNameProcTextField"); // NOI18N

        filePathProcLabel.setText(resourceMap.getString("filePathProcLabel.text")); // NOI18N
        filePathProcLabel.setName("filePathProcLabel"); // NOI18N

        fileChooserProcButton.setText(resourceMap.getString("fileChooserProcButton.text")); // NOI18N
        fileChooserProcButton.setName("fileChooserProcButton"); // NOI18N
        fileChooserProcButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileChooserProcButtonActionPerformed(evt);
            }
        });

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        processStepTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null}
            },
            new String [] {
                "Process Step", "Description", "Completed"
            }
        ));
        processStepTable.setName("processStepTable"); // NOI18N
        processStepTable.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                processStepTableInputMethodTextChanged(evt);
            }
        });
        jScrollPane1.setViewportView(processStepTable);

        notificationProcLabel.setFont(resourceMap.getFont("notificationProcLabel.font")); // NOI18N
        notificationProcLabel.setText(resourceMap.getString("notificationProcLabel.text")); // NOI18N
        notificationProcLabel.setName("notificationProcLabel"); // NOI18N

        addProcStepLabel.setText(resourceMap.getString("addProcStepLabel.text")); // NOI18N
        addProcStepLabel.setName("addProcStepLabel"); // NOI18N

        processStepTextField.setText(resourceMap.getString("processStepTextField.text")); // NOI18N
        processStepTextField.setName("processStepTextField"); // NOI18N

        addProcStepDescLabel.setText(resourceMap.getString("addProcStepDescLabel.text")); // NOI18N
        addProcStepDescLabel.setName("addProcStepDescLabel"); // NOI18N

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        processStepDescTextArea.setColumns(10);
        processStepDescTextArea.setRows(5);
        processStepDescTextArea.setName("processStepDescTextArea"); // NOI18N
        jScrollPane3.setViewportView(processStepDescTextArea);

        addProcessStepButton.setText(resourceMap.getString("addProcessStepButton.text")); // NOI18N
        addProcessStepButton.setName("addProcessStepButton"); // NOI18N
        addProcessStepButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addProcessStepButtonActionPerformed(evt);
            }
        });

        editProcessButton.setText(resourceMap.getString("editProcessButton.text")); // NOI18N
        editProcessButton.setName("editProcessButton"); // NOI18N
        editProcessButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editProcessButtonActionPerformed(evt);
            }
        });

        tabProcessDescriptionLabel.setText(resourceMap.getString("tabProcessDescriptionLabel.text")); // NOI18N
        tabProcessDescriptionLabel.setName("tabProcessDescriptionLabel"); // NOI18N

        javax.swing.GroupLayout processPanelLayout = new javax.swing.GroupLayout(processPanel);
        processPanel.setLayout(processPanelLayout);
        processPanelLayout.setHorizontalGroup(
            processPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(processPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(processPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(processPanelLayout.createSequentialGroup()
                        .addComponent(notificationProcLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 411, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(processPanelLayout.createSequentialGroup()
                        .addGroup(processPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(processPanelLayout.createSequentialGroup()
                                .addGroup(processPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(processPanelLayout.createSequentialGroup()
                                        .addComponent(addProcStepLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(processStepTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(processPanelLayout.createSequentialGroup()
                                        .addComponent(addProcStepDescLabel)
                                        .addGap(10, 10, 10)
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE))
                            .addGroup(processPanelLayout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 419, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36)))
                        .addGap(147, 147, 147))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, processPanelLayout.createSequentialGroup()
                        .addComponent(fileProcLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(processPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(filePathProcLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, processPanelLayout.createSequentialGroup()
                                .addComponent(fileNameProcTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 354, Short.MAX_VALUE)
                                .addGap(52, 52, 52)
                                .addGroup(processPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(addProcessStepButton)
                                    .addComponent(fileChooserProcButton)
                                    .addComponent(editProcessButton))))
                        .addGap(80, 80, 80))
                    .addGroup(processPanelLayout.createSequentialGroup()
                        .addComponent(tabProcessDescriptionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 549, Short.MAX_VALUE)
                        .addGap(80, 80, 80))))
        );
        processPanelLayout.setVerticalGroup(
            processPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(processPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabProcessDescriptionLabel)
                .addGap(16, 16, 16)
                .addGroup(processPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileProcLabel)
                    .addComponent(fileNameProcTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fileChooserProcButton))
                .addGap(6, 6, 6)
                .addComponent(filePathProcLabel)
                .addGap(47, 47, 47)
                .addGroup(processPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addProcStepLabel)
                    .addComponent(processStepTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addProcessStepButton))
                .addGap(18, 18, 18)
                .addGroup(processPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(addProcStepDescLabel, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(processPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(processPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(notificationProcLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(25, 25, 25))
                    .addGroup(processPanelLayout.createSequentialGroup()
                        .addComponent(editProcessButton)
                        .addContainerGap())))
        );

        fileNameProcTextField.setEditable(false);

        //check if user already selected a file at the File tab
        if(fileSelected != null){
            //default to read from the file selected
            fileNameProcTextField.setText(fileSelected.getName());
        }

        tabPane.addTab(resourceMap.getString("processPanel.TabConstraints.tabTitle"), processPanel); // NOI18N

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabPane, javax.swing.GroupLayout.DEFAULT_SIZE, 644, Short.MAX_VALUE)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(tabPane, javax.swing.GroupLayout.DEFAULT_SIZE, 465, Short.MAX_VALUE)
                .addContainerGap())
        );

        menuBar.setName("menuBar"); // NOI18N

        controlMenu.setText(resourceMap.getString("controlMenu.text")); // NOI18N
        controlMenu.setName("controlMenu"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(documentmanager.DocumentManagerApp.class).getContext().getActionMap(DocumentManagerView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        exitMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitMenuItemMouseClicked(evt);
            }
        });
        controlMenu.add(exitMenuItem);

        menuBar.add(controlMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        jTabbedPane1.setName("jTabbedPane1"); // NOI18N

        jScrollPane4.setName("jScrollPane4"); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setName("jTable1"); // NOI18N
        jScrollPane4.setViewportView(jTable1);

        setComponent(mainPanel);
        setMenuBar(menuBar);
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitMenuItemMouseClicked
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemMouseClicked

    private void commentPropertyTextAreaInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_commentPropertyTextAreaInputMethodTextChanged
        if(evt.getText() != null){
            tagPropertyTextField.setText(evt.getText().toString());
        }
}//GEN-LAST:event_commentPropertyTextAreaInputMethodTextChanged

    private void tagPropertyTextFieldInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_tagPropertyTextFieldInputMethodTextChanged
        if(evt.getText() != null){
            tagPropertyTextField.setText(evt.getText().toString());
        }
}//GEN-LAST:event_tagPropertyTextFieldInputMethodTextChanged

    
    private void editPropertyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editPropertyButtonActionPerformed
        //create a FilePropertyManager to write value back to the file info
        String filePath = fileSelected.getPath();
        try{
            FilePropertyManager fpManager = new FilePropertyManager(filePath);
            String comment = commentPropertyTextArea.getText();
            String tags = tagPropertyTextField.getText();
            String author = lastAuthorPropertyTextField.getText();

            fpManager.setFileLastAuthor(author);
            fpManager.setFileComments(comment);
            fpManager.setFileTags(tags);

            notificationLabel.setText("File property edited");
            
        } catch(Exception e){
            notificationLabel.setText("Sorry the system had trouble making update");

            System.out.println("Couldn't write doc property "
                    + e.toString() + "\n" + e.getMessage());
            e.printStackTrace();
        }
}//GEN-LAST:event_editPropertyButtonActionPerformed

    private void fileChooserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileChooserButtonActionPerformed
        //Create a file chooser
        JFileChooser fileChooser = new JFileChooser();
        //let user to start from the directory selected last time
        if(directorySelected != null){
            fileChooser.setCurrentDirectory(directorySelected);
        }

        //open a file chooser window upon clicking
        if (evt.getSource() == fileChooserButton) {
            int returnVal = fileChooser.showOpenDialog(fileNameTextField);

            if (returnVal == JFileChooser.APPROVE_OPTION) {
                //reset the notification text
                notificationLabel.setText("Notification: ");
                
                //reset all the file property textfields first
                authorPropertyTextField.setText("");
                lastAuthorPropertyTextField.setText("");
                tagPropertyTextField.setText("");
                commentPropertyTextArea.setText("");

                //set the file and directory user selects
                fileSelected = fileChooser.getSelectedFile();
                directorySelected = fileChooser.getCurrentDirectory();

                //get basic file info like file path and name
                String filePath = fileSelected.getPath();
                fileNameTextField.setText(fileSelected.getName());
                filePathLabel.setText(filePath);

                /* read file property like author and custom property set by this application*/
                try{
                    FilePropertyManager fpManager = new FilePropertyManager(filePath);

                    //read and display the file author name
                    String fileAuthor = fpManager.getFileAuthor();
                    if(fileAuthor != null){
                        authorPropertyTextField.setText(fileAuthor);
                    }

                    //read and display the last author who modified the file
                    fileAuthor = fpManager.getFileLastAuthor();
                    if(fileAuthor != null){
                        lastAuthorPropertyTextField.setText(fileAuthor);
                    }

                    //read the file's tag values and display
                    String tags = fpManager.getFileTags();
                    if(tags != null){
                        tagPropertyTextField.setText(tags);
                    }

                    //read the file's comments and display
                    String comments = fpManager.getFileComments();
                    if(comments != null){
                        commentPropertyTextArea.setText(comments);
                    }

                }catch(Exception e){
                    System.out.println("Couldn't read doc property "
                            + e.toString() + "\n" + e.getMessage());
                    e.printStackTrace();

                    if(e.getClass().getName().equals("org.apache.poi.poifs.filesystem.OfficeXmlFileException")){
                        notificationLabel.setText("Sorry the system couldn't read the file's property");
                    }
                }
            } else {
                //System.out.println("Open command cancelled by user");
            }
        }
}//GEN-LAST:event_fileChooserButtonActionPerformed

    private void lastAuthorPropertyTextFieldInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_lastAuthorPropertyTextFieldInputMethodTextChanged
        if(evt.getText() != null){
            tagPropertyTextField.setText(evt.getText().toString());
        }
}//GEN-LAST:event_lastAuthorPropertyTextFieldInputMethodTextChanged

    private void fileChooserProcButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileChooserProcButtonActionPerformed
        //Create a file chooser
        JFileChooser fileChooser = new JFileChooser();
        
        //let user to start from the directory selected last time
        if(directorySelected != null){
            fileChooser.setCurrentDirectory(directorySelected);
        }

        //open a file chooser window upon clicking
        if (evt.getSource() == fileChooserProcButton) {
            int returnVal = fileChooser.showOpenDialog(fileNameProcTextField);

            if (returnVal == JFileChooser.APPROVE_OPTION) {
                //reset notification text
                notificationProcLabel.setText("Notification: ");
                
                //reset the process display table
                processStepTable.setModel(new DefaultTableModel(
                            new Object [][]{{null, null, null}},
                            new String [] {"Process Step", "Description", "Completed"}
                ));

                //set the file and directory user selects
                fileSelected = fileChooser.getSelectedFile();
                directorySelected = fileChooser.getCurrentDirectory();

                //get basic file info like file path and name
                String filePath = fileSelected.getPath();
                fileNameProcTextField.setText(fileSelected.getName());
                filePathProcLabel.setText(filePath);

                /* read process property set by this application*/
                try{
                    FilePropertyManager fpManager = new FilePropertyManager(filePath);

                    //read all the process steps and display in table
                    HashMap <String, String> descriptionMap = fpManager.getFileProcessStepDescription();
                    HashMap <String, String> statusMap = fpManager.getFileProcessStepStatus();
                    int rowCount = 0;
                    for (String stepNum : descriptionMap.keySet()) {
                        String description = descriptionMap.get(stepNum);
                        String status = statusMap.get(stepNum);

                        //set all the process values to table row
                        processStepTable.setValueAt(stepNum, rowCount, PROCESS_STEP_COLPOS);
                        processStepTable.setValueAt(description, rowCount, PROCESS_DESCRIPTION_COLPOS);
                        processStepTable.setValueAt(status, rowCount, PROCESS_STATUSFLAG_COLPOS);

                        //prepare to go to the next row
                        rowCount ++;

                        //add a row to the table for next process property
                        DefaultTableModel tableModel = (DefaultTableModel) processStepTable.getModel();
                        tableModel.addRow(new Object []{null, null, null});
                    }


                }catch(Exception e){
                    System.out.println("Couldn't read doc process property "
                            + e.toString() + "\n" + e.getMessage());
                    e.printStackTrace();

                    if(e.getClass().getName().equals("org.apache.poi.poifs.filesystem.OfficeXmlFileException")){
                        notificationProcLabel.setText("Sorry the system couldn't read the file's property");
                    }
                }
            } else {
                //System.out.println("Open command cancelled by user");
            }
        }
    }//GEN-LAST:event_fileChooserProcButtonActionPerformed

    private void addProcessStepButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addProcessStepButtonActionPerformed
        //create a FilePropertyManager to write value back to the file property
        String filePath = fileSelected.getPath();
        try{
            FilePropertyManager fpManager = new FilePropertyManager(filePath);
            String processStep = processStepTextField.getText();
            String processDescription = processStepDescTextArea.getText();
            fpManager.addProcessStep(processStep, processDescription);

            notificationProcLabel.setText("Process Step Added");

        } catch(Exception e){
            notificationProcLabel.setText("Sorry the system had trouble making update");

            System.out.println("Couldn't write doc property "
                    + e.toString() + "\n" + e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_addProcessStepButtonActionPerformed

    private void processStepTableInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_processStepTableInputMethodTextChanged
        if(evt.getText() != null){
            int rowNum = processStepTable.getEditingRow();
            int colNum = processStepTable.getEditingColumn();
            processStepTable.setValueAt(evt.getText(), rowNum, colNum);
        }
    }//GEN-LAST:event_processStepTableInputMethodTextChanged

    private void editProcessButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editProcessButtonActionPerformed
        //create a FilePropertyManager to write value back to the file info
        String filePath = fileSelected.getPath();
        
        //update all process properties
        try{
            FilePropertyManager fpManager = new FilePropertyManager(filePath);

            //update process property row by row
            int rowCount = processStepTable.getRowCount();
            rowCount = rowCount - 1; //the last row is empty
            int index = 0;
            for(index=0; index < rowCount; index++){
                //System.out.println("Row:　" + index);
                String step = processStepTable.getValueAt(index, PROCESS_STEP_COLPOS).toString();
                String description = processStepTable.getValueAt(index, PROCESS_DESCRIPTION_COLPOS).toString();
                String status = processStepTable.getValueAt(index, PROCESS_STATUSFLAG_COLPOS).toString();

                fpManager.editProcessInfo(step, description, status);
            }

            notificationProcLabel.setText("Process info edited");

        } catch(Exception e){
            notificationProcLabel.setText("Sorry the system had trouble making update");

            System.out.println("Couldn't write doc property "
                    + e.toString() + "\n" + e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_editProcessButtonActionPerformed

/* event handling when user clicks on the button to select file*/
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addProcStepDescLabel;
    private javax.swing.JLabel addProcStepLabel;
    private javax.swing.JButton addProcessStepButton;
    private javax.swing.JLabel authorPropertyLabel;
    private javax.swing.JTextField authorPropertyTextField;
    private javax.swing.JLabel commentPropertyLabel;
    private javax.swing.JTextArea commentPropertyTextArea;
    private javax.swing.JButton editProcessButton;
    private javax.swing.JButton editPropertyButton;
    private javax.swing.JButton fileChooserButton;
    private javax.swing.JButton fileChooserProcButton;
    private javax.swing.JLabel fileLabel;
    private javax.swing.JTextField fileNameProcTextField;
    private javax.swing.JTextField fileNameTextField;
    private javax.swing.JPanel filePanel;
    private javax.swing.JLabel filePathLabel;
    private javax.swing.JLabel filePathProcLabel;
    private javax.swing.JLabel fileProcLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lastAuthorPropertyLabel;
    private javax.swing.JTextField lastAuthorPropertyTextField;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JLabel notificationLabel;
    private javax.swing.JLabel notificationProcLabel;
    private javax.swing.JPanel processPanel;
    private javax.swing.JTextArea processStepDescTextArea;
    private javax.swing.JTable processStepTable;
    private javax.swing.JTextField processStepTextField;
    private javax.swing.JLabel tabFileDescriptionLabel;
    private javax.swing.JTabbedPane tabPane;
    private javax.swing.JLabel tabProcessDescriptionLabel;
    private javax.swing.JLabel tagPropertyLabel;
    private javax.swing.JTextField tagPropertyTextField;
    // End of variables declaration//GEN-END:variables


    private JDialog aboutBox;
}
